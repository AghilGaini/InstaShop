




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `InstaShop`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.\sqlexpress;Initial Catalog=InstaShop;Integrated Security=False;User Id=sa;password=**zapped**;MultipleActiveResultSets=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Models.Generated.InstaShop
{

	public partial class InstaShopDB : Database
	{
		public InstaShopDB() 
			: base("InstaShop")
		{
			CommonConstruct();
		}

		public InstaShopDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			InstaShopDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static InstaShopDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new InstaShopDB();
        }

		[ThreadStatic] static InstaShopDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static InstaShopDB repo { get { return InstaShopDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("[dbo].[Category]")]



	[PrimaryKey("[ID]")]




	[ExplicitColumns]

    public partial class Category : InstaShopDB.Record<Category>  
    {

		public struct Columns
		{
			
				static string ID = @"ID";

			
				static string Gid = @"Gid";

			
				static string Name = @"Name";

			
				static string ParrentGid = @"ParrentGid";

			
				static string CreatedOn = @"CreatedOn";

			
				static string CreatedBy = @"CreatedBy";

			
				static string ModfiedOn = @"ModfiedOn";

			
				static string ModifiedBy = @"ModifiedBy";

			

		}





		[Column] public int ID { get; set; }





		[Column] public Guid Gid { get; set; }





		[Column] public string Name { get; set; }





		[Column] public Guid? ParrentGid { get; set; }





		[Column] public DateTime? CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModfiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}

    

	[TableName("[dbo].[Shop]")]



	[PrimaryKey("[ID]")]




	[ExplicitColumns]

    public partial class Shop : InstaShopDB.Record<Shop>  
    {

		public struct Columns
		{
			
				static string ID = @"ID";

			
				static string InstaID = @"InstaID";

			
				static string Name = @"Name";

			
				static string PostsCount = @"PostsCount";

			
				static string Followers = @"Followers";

			
				static string Following = @"Following";

			
				static string Bio = @"Bio";

			
				static string CategoryID = @"CategoryID";

			
				static string CityID = @"CityID";

			
				static string MainProfilePicPath = @"MainProfilePicPath";

			
				static string VirtualProfilePicPath = @"VirtualProfilePicPath";

			
				static string CreatedOn = @"CreatedOn";

			
				static string CreatedBy = @"CreatedBy";

			
				static string ModifiedOn = @"ModifiedOn";

			
				static string ModifiedBy = @"ModifiedBy";

			

		}





		[Column] public long ID { get; set; }





		[Column] public long InstaID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public int PostsCount { get; set; }





		[Column] public int Followers { get; set; }





		[Column] public int Following { get; set; }





		[Column] public string Bio { get; set; }





		[Column] public int? CategoryID { get; set; }





		[Column] public int? CityID { get; set; }





		[Column] public string MainProfilePicPath { get; set; }





		[Column] public string VirtualProfilePicPath { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}

    

	[TableName("[dbo].[ShopPost]")]



	[PrimaryKey("[ID]")]




	[ExplicitColumns]

    public partial class ShopPost : InstaShopDB.Record<ShopPost>  
    {

		public struct Columns
		{
			
				static string ID = @"ID";

			
				static string ShopID = @"ShopID";

			
				static string PublicPictureURLs = @"PublicPictureURLs";

			
				static string Hashtags = @"Hashtags";

			
				static string Description = @"Description";

			
				static string LikesCount = @"LikesCount";

			
				static string CommentsCount = @"CommentsCount";

			
				static string CreatedOn = @"CreatedOn";

			
				static string CreatedBy = @"CreatedBy";

			
				static string ModifiedOn = @"ModifiedOn";

			
				static string ModifiedBy = @"ModifiedBy";

			

		}





		[Column] public long ID { get; set; }





		[Column] public long ShopID { get; set; }





		[Column] public string PublicPictureURLs { get; set; }





		[Column] public string Hashtags { get; set; }





		[Column] public string Description { get; set; }





		[Column] public int? LikesCount { get; set; }





		[Column] public int? CommentsCount { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}


}
